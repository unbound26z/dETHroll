/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface IAuthorizationUtilsV0Interface extends Interface {
  getFunction(
    nameOrSignature: "checkAuthorizationStatus" | "checkAuthorizationStatuses"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkAuthorizationStatus",
    values: [
      AddressLike[],
      AddressLike,
      BytesLike,
      BytesLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAuthorizationStatuses",
    values: [
      AddressLike[],
      AddressLike,
      BytesLike[],
      BytesLike[],
      AddressLike[],
      AddressLike[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkAuthorizationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAuthorizationStatuses",
    data: BytesLike
  ): Result;
}

export interface IAuthorizationUtilsV0 extends BaseContract {
  connect(runner?: ContractRunner | null): IAuthorizationUtilsV0;
  waitForDeployment(): Promise<this>;

  interface: IAuthorizationUtilsV0Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkAuthorizationStatus: TypedContractMethod<
    [
      authorizers: AddressLike[],
      airnode: AddressLike,
      requestId: BytesLike,
      endpointId: BytesLike,
      sponsor: AddressLike,
      requester: AddressLike
    ],
    [boolean],
    "view"
  >;

  checkAuthorizationStatuses: TypedContractMethod<
    [
      authorizers: AddressLike[],
      airnode: AddressLike,
      requestIds: BytesLike[],
      endpointIds: BytesLike[],
      sponsors: AddressLike[],
      requesters: AddressLike[]
    ],
    [boolean[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkAuthorizationStatus"
  ): TypedContractMethod<
    [
      authorizers: AddressLike[],
      airnode: AddressLike,
      requestId: BytesLike,
      endpointId: BytesLike,
      sponsor: AddressLike,
      requester: AddressLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkAuthorizationStatuses"
  ): TypedContractMethod<
    [
      authorizers: AddressLike[],
      airnode: AddressLike,
      requestIds: BytesLike[],
      endpointIds: BytesLike[],
      sponsors: AddressLike[],
      requesters: AddressLike[]
    ],
    [boolean[]],
    "view"
  >;

  filters: {};
}
