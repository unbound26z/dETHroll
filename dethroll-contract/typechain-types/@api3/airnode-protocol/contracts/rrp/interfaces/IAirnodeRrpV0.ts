/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface IAirnodeRrpV0Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkAuthorizationStatus"
      | "checkAuthorizationStatuses"
      | "createTemplate"
      | "fail"
      | "fulfill"
      | "fulfillWithdrawal"
      | "getTemplates"
      | "makeFullRequest"
      | "makeTemplateRequest"
      | "requestIsAwaitingFulfillment"
      | "requestWithdrawal"
      | "requesterToRequestCountPlusOne"
      | "setSponsorshipStatus"
      | "sponsorToRequesterToSponsorshipStatus"
      | "sponsorToWithdrawalRequestCount"
      | "templates"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CreatedTemplate"
      | "FailedRequest"
      | "FulfilledRequest"
      | "FulfilledWithdrawal"
      | "MadeFullRequest"
      | "MadeTemplateRequest"
      | "RequestedWithdrawal"
      | "SetSponsorshipStatus"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkAuthorizationStatus",
    values: [
      AddressLike[],
      AddressLike,
      BytesLike,
      BytesLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAuthorizationStatuses",
    values: [
      AddressLike[],
      AddressLike,
      BytesLike[],
      BytesLike[],
      AddressLike[],
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createTemplate",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fail",
    values: [BytesLike, AddressLike, AddressLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfill",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillWithdrawal",
    values: [BytesLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTemplates",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "makeFullRequest",
    values: [
      AddressLike,
      BytesLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makeTemplateRequest",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requestIsAwaitingFulfillment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdrawal",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requesterToRequestCountPlusOne",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSponsorshipStatus",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorToRequesterToSponsorshipStatus",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorToWithdrawalRequestCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "templates",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkAuthorizationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAuthorizationStatuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fail", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fulfill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulfillWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTemplates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeFullRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeTemplateRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestIsAwaitingFulfillment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requesterToRequestCountPlusOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSponsorshipStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorToRequesterToSponsorshipStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorToWithdrawalRequestCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "templates", data: BytesLike): Result;
}

export namespace CreatedTemplateEvent {
  export type InputTuple = [
    templateId: BytesLike,
    airnode: AddressLike,
    endpointId: BytesLike,
    parameters: BytesLike
  ];
  export type OutputTuple = [
    templateId: string,
    airnode: string,
    endpointId: string,
    parameters: string
  ];
  export interface OutputObject {
    templateId: string;
    airnode: string;
    endpointId: string;
    parameters: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FailedRequestEvent {
  export type InputTuple = [
    airnode: AddressLike,
    requestId: BytesLike,
    errorMessage: string
  ];
  export type OutputTuple = [
    airnode: string,
    requestId: string,
    errorMessage: string
  ];
  export interface OutputObject {
    airnode: string;
    requestId: string;
    errorMessage: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FulfilledRequestEvent {
  export type InputTuple = [
    airnode: AddressLike,
    requestId: BytesLike,
    data: BytesLike
  ];
  export type OutputTuple = [airnode: string, requestId: string, data: string];
  export interface OutputObject {
    airnode: string;
    requestId: string;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FulfilledWithdrawalEvent {
  export type InputTuple = [
    airnode: AddressLike,
    sponsor: AddressLike,
    withdrawalRequestId: BytesLike,
    sponsorWallet: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    airnode: string,
    sponsor: string,
    withdrawalRequestId: string,
    sponsorWallet: string,
    amount: bigint
  ];
  export interface OutputObject {
    airnode: string;
    sponsor: string;
    withdrawalRequestId: string;
    sponsorWallet: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MadeFullRequestEvent {
  export type InputTuple = [
    airnode: AddressLike,
    requestId: BytesLike,
    requesterRequestCount: BigNumberish,
    chainId: BigNumberish,
    requester: AddressLike,
    endpointId: BytesLike,
    sponsor: AddressLike,
    sponsorWallet: AddressLike,
    fulfillAddress: AddressLike,
    fulfillFunctionId: BytesLike,
    parameters: BytesLike
  ];
  export type OutputTuple = [
    airnode: string,
    requestId: string,
    requesterRequestCount: bigint,
    chainId: bigint,
    requester: string,
    endpointId: string,
    sponsor: string,
    sponsorWallet: string,
    fulfillAddress: string,
    fulfillFunctionId: string,
    parameters: string
  ];
  export interface OutputObject {
    airnode: string;
    requestId: string;
    requesterRequestCount: bigint;
    chainId: bigint;
    requester: string;
    endpointId: string;
    sponsor: string;
    sponsorWallet: string;
    fulfillAddress: string;
    fulfillFunctionId: string;
    parameters: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MadeTemplateRequestEvent {
  export type InputTuple = [
    airnode: AddressLike,
    requestId: BytesLike,
    requesterRequestCount: BigNumberish,
    chainId: BigNumberish,
    requester: AddressLike,
    templateId: BytesLike,
    sponsor: AddressLike,
    sponsorWallet: AddressLike,
    fulfillAddress: AddressLike,
    fulfillFunctionId: BytesLike,
    parameters: BytesLike
  ];
  export type OutputTuple = [
    airnode: string,
    requestId: string,
    requesterRequestCount: bigint,
    chainId: bigint,
    requester: string,
    templateId: string,
    sponsor: string,
    sponsorWallet: string,
    fulfillAddress: string,
    fulfillFunctionId: string,
    parameters: string
  ];
  export interface OutputObject {
    airnode: string;
    requestId: string;
    requesterRequestCount: bigint;
    chainId: bigint;
    requester: string;
    templateId: string;
    sponsor: string;
    sponsorWallet: string;
    fulfillAddress: string;
    fulfillFunctionId: string;
    parameters: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestedWithdrawalEvent {
  export type InputTuple = [
    airnode: AddressLike,
    sponsor: AddressLike,
    withdrawalRequestId: BytesLike,
    sponsorWallet: AddressLike
  ];
  export type OutputTuple = [
    airnode: string,
    sponsor: string,
    withdrawalRequestId: string,
    sponsorWallet: string
  ];
  export interface OutputObject {
    airnode: string;
    sponsor: string;
    withdrawalRequestId: string;
    sponsorWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetSponsorshipStatusEvent {
  export type InputTuple = [
    sponsor: AddressLike,
    requester: AddressLike,
    sponsorshipStatus: boolean
  ];
  export type OutputTuple = [
    sponsor: string,
    requester: string,
    sponsorshipStatus: boolean
  ];
  export interface OutputObject {
    sponsor: string;
    requester: string;
    sponsorshipStatus: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IAirnodeRrpV0 extends BaseContract {
  connect(runner?: ContractRunner | null): IAirnodeRrpV0;
  waitForDeployment(): Promise<this>;

  interface: IAirnodeRrpV0Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkAuthorizationStatus: TypedContractMethod<
    [
      authorizers: AddressLike[],
      airnode: AddressLike,
      requestId: BytesLike,
      endpointId: BytesLike,
      sponsor: AddressLike,
      requester: AddressLike
    ],
    [boolean],
    "view"
  >;

  checkAuthorizationStatuses: TypedContractMethod<
    [
      authorizers: AddressLike[],
      airnode: AddressLike,
      requestIds: BytesLike[],
      endpointIds: BytesLike[],
      sponsors: AddressLike[],
      requesters: AddressLike[]
    ],
    [boolean[]],
    "view"
  >;

  createTemplate: TypedContractMethod<
    [airnode: AddressLike, endpointId: BytesLike, parameters: BytesLike],
    [string],
    "nonpayable"
  >;

  fail: TypedContractMethod<
    [
      requestId: BytesLike,
      airnode: AddressLike,
      fulfillAddress: AddressLike,
      fulfillFunctionId: BytesLike,
      errorMessage: string
    ],
    [void],
    "nonpayable"
  >;

  fulfill: TypedContractMethod<
    [
      requestId: BytesLike,
      airnode: AddressLike,
      fulfillAddress: AddressLike,
      fulfillFunctionId: BytesLike,
      data: BytesLike,
      signature: BytesLike
    ],
    [[boolean, string] & { callSuccess: boolean; callData: string }],
    "nonpayable"
  >;

  fulfillWithdrawal: TypedContractMethod<
    [
      withdrawalRequestId: BytesLike,
      airnode: AddressLike,
      sponsor: AddressLike
    ],
    [void],
    "payable"
  >;

  getTemplates: TypedContractMethod<
    [templateIds: BytesLike[]],
    [
      [string[], string[], string[]] & {
        airnodes: string[];
        endpointIds: string[];
        parameters: string[];
      }
    ],
    "view"
  >;

  makeFullRequest: TypedContractMethod<
    [
      airnode: AddressLike,
      endpointId: BytesLike,
      sponsor: AddressLike,
      sponsorWallet: AddressLike,
      fulfillAddress: AddressLike,
      fulfillFunctionId: BytesLike,
      parameters: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  makeTemplateRequest: TypedContractMethod<
    [
      templateId: BytesLike,
      sponsor: AddressLike,
      sponsorWallet: AddressLike,
      fulfillAddress: AddressLike,
      fulfillFunctionId: BytesLike,
      parameters: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  requestIsAwaitingFulfillment: TypedContractMethod<
    [requestId: BytesLike],
    [boolean],
    "view"
  >;

  requestWithdrawal: TypedContractMethod<
    [airnode: AddressLike, sponsorWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  requesterToRequestCountPlusOne: TypedContractMethod<
    [requester: AddressLike],
    [bigint],
    "view"
  >;

  setSponsorshipStatus: TypedContractMethod<
    [requester: AddressLike, sponsorshipStatus: boolean],
    [void],
    "nonpayable"
  >;

  sponsorToRequesterToSponsorshipStatus: TypedContractMethod<
    [sponsor: AddressLike, requester: AddressLike],
    [boolean],
    "view"
  >;

  sponsorToWithdrawalRequestCount: TypedContractMethod<
    [sponsor: AddressLike],
    [bigint],
    "view"
  >;

  templates: TypedContractMethod<
    [templateId: BytesLike],
    [
      [string, string, string] & {
        airnode: string;
        endpointId: string;
        parameters: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkAuthorizationStatus"
  ): TypedContractMethod<
    [
      authorizers: AddressLike[],
      airnode: AddressLike,
      requestId: BytesLike,
      endpointId: BytesLike,
      sponsor: AddressLike,
      requester: AddressLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkAuthorizationStatuses"
  ): TypedContractMethod<
    [
      authorizers: AddressLike[],
      airnode: AddressLike,
      requestIds: BytesLike[],
      endpointIds: BytesLike[],
      sponsors: AddressLike[],
      requesters: AddressLike[]
    ],
    [boolean[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "createTemplate"
  ): TypedContractMethod<
    [airnode: AddressLike, endpointId: BytesLike, parameters: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fail"
  ): TypedContractMethod<
    [
      requestId: BytesLike,
      airnode: AddressLike,
      fulfillAddress: AddressLike,
      fulfillFunctionId: BytesLike,
      errorMessage: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fulfill"
  ): TypedContractMethod<
    [
      requestId: BytesLike,
      airnode: AddressLike,
      fulfillAddress: AddressLike,
      fulfillFunctionId: BytesLike,
      data: BytesLike,
      signature: BytesLike
    ],
    [[boolean, string] & { callSuccess: boolean; callData: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fulfillWithdrawal"
  ): TypedContractMethod<
    [
      withdrawalRequestId: BytesLike,
      airnode: AddressLike,
      sponsor: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getTemplates"
  ): TypedContractMethod<
    [templateIds: BytesLike[]],
    [
      [string[], string[], string[]] & {
        airnodes: string[];
        endpointIds: string[];
        parameters: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "makeFullRequest"
  ): TypedContractMethod<
    [
      airnode: AddressLike,
      endpointId: BytesLike,
      sponsor: AddressLike,
      sponsorWallet: AddressLike,
      fulfillAddress: AddressLike,
      fulfillFunctionId: BytesLike,
      parameters: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "makeTemplateRequest"
  ): TypedContractMethod<
    [
      templateId: BytesLike,
      sponsor: AddressLike,
      sponsorWallet: AddressLike,
      fulfillAddress: AddressLike,
      fulfillFunctionId: BytesLike,
      parameters: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestIsAwaitingFulfillment"
  ): TypedContractMethod<[requestId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "requestWithdrawal"
  ): TypedContractMethod<
    [airnode: AddressLike, sponsorWallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requesterToRequestCountPlusOne"
  ): TypedContractMethod<[requester: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setSponsorshipStatus"
  ): TypedContractMethod<
    [requester: AddressLike, sponsorshipStatus: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sponsorToRequesterToSponsorshipStatus"
  ): TypedContractMethod<
    [sponsor: AddressLike, requester: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "sponsorToWithdrawalRequestCount"
  ): TypedContractMethod<[sponsor: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "templates"
  ): TypedContractMethod<
    [templateId: BytesLike],
    [
      [string, string, string] & {
        airnode: string;
        endpointId: string;
        parameters: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "CreatedTemplate"
  ): TypedContractEvent<
    CreatedTemplateEvent.InputTuple,
    CreatedTemplateEvent.OutputTuple,
    CreatedTemplateEvent.OutputObject
  >;
  getEvent(
    key: "FailedRequest"
  ): TypedContractEvent<
    FailedRequestEvent.InputTuple,
    FailedRequestEvent.OutputTuple,
    FailedRequestEvent.OutputObject
  >;
  getEvent(
    key: "FulfilledRequest"
  ): TypedContractEvent<
    FulfilledRequestEvent.InputTuple,
    FulfilledRequestEvent.OutputTuple,
    FulfilledRequestEvent.OutputObject
  >;
  getEvent(
    key: "FulfilledWithdrawal"
  ): TypedContractEvent<
    FulfilledWithdrawalEvent.InputTuple,
    FulfilledWithdrawalEvent.OutputTuple,
    FulfilledWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "MadeFullRequest"
  ): TypedContractEvent<
    MadeFullRequestEvent.InputTuple,
    MadeFullRequestEvent.OutputTuple,
    MadeFullRequestEvent.OutputObject
  >;
  getEvent(
    key: "MadeTemplateRequest"
  ): TypedContractEvent<
    MadeTemplateRequestEvent.InputTuple,
    MadeTemplateRequestEvent.OutputTuple,
    MadeTemplateRequestEvent.OutputObject
  >;
  getEvent(
    key: "RequestedWithdrawal"
  ): TypedContractEvent<
    RequestedWithdrawalEvent.InputTuple,
    RequestedWithdrawalEvent.OutputTuple,
    RequestedWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "SetSponsorshipStatus"
  ): TypedContractEvent<
    SetSponsorshipStatusEvent.InputTuple,
    SetSponsorshipStatusEvent.OutputTuple,
    SetSponsorshipStatusEvent.OutputObject
  >;

  filters: {
    "CreatedTemplate(bytes32,address,bytes32,bytes)": TypedContractEvent<
      CreatedTemplateEvent.InputTuple,
      CreatedTemplateEvent.OutputTuple,
      CreatedTemplateEvent.OutputObject
    >;
    CreatedTemplate: TypedContractEvent<
      CreatedTemplateEvent.InputTuple,
      CreatedTemplateEvent.OutputTuple,
      CreatedTemplateEvent.OutputObject
    >;

    "FailedRequest(address,bytes32,string)": TypedContractEvent<
      FailedRequestEvent.InputTuple,
      FailedRequestEvent.OutputTuple,
      FailedRequestEvent.OutputObject
    >;
    FailedRequest: TypedContractEvent<
      FailedRequestEvent.InputTuple,
      FailedRequestEvent.OutputTuple,
      FailedRequestEvent.OutputObject
    >;

    "FulfilledRequest(address,bytes32,bytes)": TypedContractEvent<
      FulfilledRequestEvent.InputTuple,
      FulfilledRequestEvent.OutputTuple,
      FulfilledRequestEvent.OutputObject
    >;
    FulfilledRequest: TypedContractEvent<
      FulfilledRequestEvent.InputTuple,
      FulfilledRequestEvent.OutputTuple,
      FulfilledRequestEvent.OutputObject
    >;

    "FulfilledWithdrawal(address,address,bytes32,address,uint256)": TypedContractEvent<
      FulfilledWithdrawalEvent.InputTuple,
      FulfilledWithdrawalEvent.OutputTuple,
      FulfilledWithdrawalEvent.OutputObject
    >;
    FulfilledWithdrawal: TypedContractEvent<
      FulfilledWithdrawalEvent.InputTuple,
      FulfilledWithdrawalEvent.OutputTuple,
      FulfilledWithdrawalEvent.OutputObject
    >;

    "MadeFullRequest(address,bytes32,uint256,uint256,address,bytes32,address,address,address,bytes4,bytes)": TypedContractEvent<
      MadeFullRequestEvent.InputTuple,
      MadeFullRequestEvent.OutputTuple,
      MadeFullRequestEvent.OutputObject
    >;
    MadeFullRequest: TypedContractEvent<
      MadeFullRequestEvent.InputTuple,
      MadeFullRequestEvent.OutputTuple,
      MadeFullRequestEvent.OutputObject
    >;

    "MadeTemplateRequest(address,bytes32,uint256,uint256,address,bytes32,address,address,address,bytes4,bytes)": TypedContractEvent<
      MadeTemplateRequestEvent.InputTuple,
      MadeTemplateRequestEvent.OutputTuple,
      MadeTemplateRequestEvent.OutputObject
    >;
    MadeTemplateRequest: TypedContractEvent<
      MadeTemplateRequestEvent.InputTuple,
      MadeTemplateRequestEvent.OutputTuple,
      MadeTemplateRequestEvent.OutputObject
    >;

    "RequestedWithdrawal(address,address,bytes32,address)": TypedContractEvent<
      RequestedWithdrawalEvent.InputTuple,
      RequestedWithdrawalEvent.OutputTuple,
      RequestedWithdrawalEvent.OutputObject
    >;
    RequestedWithdrawal: TypedContractEvent<
      RequestedWithdrawalEvent.InputTuple,
      RequestedWithdrawalEvent.OutputTuple,
      RequestedWithdrawalEvent.OutputObject
    >;

    "SetSponsorshipStatus(address,address,bool)": TypedContractEvent<
      SetSponsorshipStatusEvent.InputTuple,
      SetSponsorshipStatusEvent.OutputTuple,
      SetSponsorshipStatusEvent.OutputObject
    >;
    SetSponsorshipStatus: TypedContractEvent<
      SetSponsorshipStatusEvent.InputTuple,
      SetSponsorshipStatusEvent.OutputTuple,
      SetSponsorshipStatusEvent.OutputObject
    >;
  };
}
