/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface ITemplateUtilsV0Interface extends Interface {
  getFunction(
    nameOrSignature: "createTemplate" | "getTemplates" | "templates"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "CreatedTemplate"): EventFragment;

  encodeFunctionData(
    functionFragment: "createTemplate",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTemplates",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "templates",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTemplates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "templates", data: BytesLike): Result;
}

export namespace CreatedTemplateEvent {
  export type InputTuple = [
    templateId: BytesLike,
    airnode: AddressLike,
    endpointId: BytesLike,
    parameters: BytesLike
  ];
  export type OutputTuple = [
    templateId: string,
    airnode: string,
    endpointId: string,
    parameters: string
  ];
  export interface OutputObject {
    templateId: string;
    airnode: string;
    endpointId: string;
    parameters: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ITemplateUtilsV0 extends BaseContract {
  connect(runner?: ContractRunner | null): ITemplateUtilsV0;
  waitForDeployment(): Promise<this>;

  interface: ITemplateUtilsV0Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createTemplate: TypedContractMethod<
    [airnode: AddressLike, endpointId: BytesLike, parameters: BytesLike],
    [string],
    "nonpayable"
  >;

  getTemplates: TypedContractMethod<
    [templateIds: BytesLike[]],
    [
      [string[], string[], string[]] & {
        airnodes: string[];
        endpointIds: string[];
        parameters: string[];
      }
    ],
    "view"
  >;

  templates: TypedContractMethod<
    [templateId: BytesLike],
    [
      [string, string, string] & {
        airnode: string;
        endpointId: string;
        parameters: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createTemplate"
  ): TypedContractMethod<
    [airnode: AddressLike, endpointId: BytesLike, parameters: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTemplates"
  ): TypedContractMethod<
    [templateIds: BytesLike[]],
    [
      [string[], string[], string[]] & {
        airnodes: string[];
        endpointIds: string[];
        parameters: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "templates"
  ): TypedContractMethod<
    [templateId: BytesLike],
    [
      [string, string, string] & {
        airnode: string;
        endpointId: string;
        parameters: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "CreatedTemplate"
  ): TypedContractEvent<
    CreatedTemplateEvent.InputTuple,
    CreatedTemplateEvent.OutputTuple,
    CreatedTemplateEvent.OutputObject
  >;

  filters: {
    "CreatedTemplate(bytes32,address,bytes32,bytes)": TypedContractEvent<
      CreatedTemplateEvent.InputTuple,
      CreatedTemplateEvent.OutputTuple,
      CreatedTemplateEvent.OutputObject
    >;
    CreatedTemplate: TypedContractEvent<
      CreatedTemplateEvent.InputTuple,
      CreatedTemplateEvent.OutputTuple,
      CreatedTemplateEvent.OutputObject
    >;
  };
}
