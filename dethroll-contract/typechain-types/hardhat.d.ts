/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IAirnodeRrpV0",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAirnodeRrpV0__factory>;
    getContractFactory(
      name: "IAuthorizationUtilsV0",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAuthorizationUtilsV0__factory>;
    getContractFactory(
      name: "ITemplateUtilsV0",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITemplateUtilsV0__factory>;
    getContractFactory(
      name: "IWithdrawalUtilsV0",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWithdrawalUtilsV0__factory>;
    getContractFactory(
      name: "RrpRequesterV0",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RrpRequesterV0__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "DETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DETH__factory>;
    getContractFactory(
      name: "DETHRoll",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DETHRoll__factory>;
    getContractFactory(
      name: "Lock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lock__factory>;

    getContractAt(
      name: "IAirnodeRrpV0",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAirnodeRrpV0>;
    getContractAt(
      name: "IAuthorizationUtilsV0",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAuthorizationUtilsV0>;
    getContractAt(
      name: "ITemplateUtilsV0",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITemplateUtilsV0>;
    getContractAt(
      name: "IWithdrawalUtilsV0",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWithdrawalUtilsV0>;
    getContractAt(
      name: "RrpRequesterV0",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RrpRequesterV0>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "DETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DETH>;
    getContractAt(
      name: "DETHRoll",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DETHRoll>;
    getContractAt(
      name: "Lock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Lock>;

    deployContract(
      name: "IAirnodeRrpV0",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAirnodeRrpV0>;
    deployContract(
      name: "IAuthorizationUtilsV0",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAuthorizationUtilsV0>;
    deployContract(
      name: "ITemplateUtilsV0",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITemplateUtilsV0>;
    deployContract(
      name: "IWithdrawalUtilsV0",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWithdrawalUtilsV0>;
    deployContract(
      name: "RrpRequesterV0",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RrpRequesterV0>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "DETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DETH>;
    deployContract(
      name: "DETHRoll",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DETHRoll>;
    deployContract(
      name: "Lock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Lock>;

    deployContract(
      name: "IAirnodeRrpV0",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAirnodeRrpV0>;
    deployContract(
      name: "IAuthorizationUtilsV0",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAuthorizationUtilsV0>;
    deployContract(
      name: "ITemplateUtilsV0",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITemplateUtilsV0>;
    deployContract(
      name: "IWithdrawalUtilsV0",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWithdrawalUtilsV0>;
    deployContract(
      name: "RrpRequesterV0",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RrpRequesterV0>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "DETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DETH>;
    deployContract(
      name: "DETHRoll",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DETHRoll>;
    deployContract(
      name: "Lock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Lock>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
