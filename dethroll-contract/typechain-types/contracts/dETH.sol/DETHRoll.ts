/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace DETHRoll {
  export type GameStruct = {
    player1: AddressLike;
    player2: AddressLike;
    startTimestamp: BigNumberish;
    lastRandomNumber: BigNumberish;
    betAmount: BigNumberish;
    lastPlayer1: boolean;
    rollsCount: BigNumberish;
    winner: AddressLike;
  };

  export type GameStructOutput = [
    player1: string,
    player2: string,
    startTimestamp: bigint,
    lastRandomNumber: bigint,
    betAmount: bigint,
    lastPlayer1: boolean,
    rollsCount: bigint,
    winner: string
  ] & {
    player1: string;
    player2: string;
    startTimestamp: bigint;
    lastRandomNumber: bigint;
    betAmount: bigint;
    lastPlayer1: boolean;
    rollsCount: bigint;
    winner: string;
  };

  export type PlayerStruct = { discord: string; sigWallet: AddressLike };

  export type PlayerStructOutput = [discord: string, sigWallet: string] & {
    discord: string;
    sigWallet: string;
  };
}

export interface DETHRollInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "depositErc20"
      | "expectingRequestWithIdToBeFulfilled"
      | "getGame"
      | "getMinePendingGame"
      | "getPlayer"
      | "getRandomNumber"
      | "getUserBalance"
      | "initGame"
      | "joinGame"
      | "owner"
      | "rawFulfillRandomWords"
      | "register"
      | "renounceOwnership"
      | "roll"
      | "terminatePendingGame"
      | "transferOwnership"
      | "verifyMessage"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GameCreated"
      | "GameJoin"
      | "GameWon"
      | "OwnershipTransferred"
      | "Roll"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "depositErc20",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expectingRequestWithIdToBeFulfilled",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getGame", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getMinePendingGame",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initGame",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "joinGame",
    values: [string, AddressLike, BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [AddressLike, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roll",
    values: [string, BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "terminatePendingGame",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMessage",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expectingRequestWithIdToBeFulfilled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMinePendingGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "terminatePendingGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMessage",
    data: BytesLike
  ): Result;
}

export namespace GameCreatedEvent {
  export type InputTuple = [amount: BigNumberish, player1: AddressLike];
  export type OutputTuple = [amount: bigint, player1: string];
  export interface OutputObject {
    amount: bigint;
    player1: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameJoinEvent {
  export type InputTuple = [
    gameId: string,
    amount: BigNumberish,
    player2: AddressLike,
    player1: AddressLike
  ];
  export type OutputTuple = [
    gameId: string,
    amount: bigint,
    player2: string,
    player1: string
  ];
  export interface OutputObject {
    gameId: string;
    amount: bigint;
    player2: string;
    player1: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameWonEvent {
  export type InputTuple = [
    gameId: string,
    winner: AddressLike,
    loser: AddressLike,
    wonAmount: BigNumberish
  ];
  export type OutputTuple = [
    gameId: string,
    winner: string,
    loser: string,
    wonAmount: bigint
  ];
  export interface OutputObject {
    gameId: string;
    winner: string;
    loser: string;
    wonAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RollEvent {
  export type InputTuple = [
    gameId: string,
    player: AddressLike,
    rolledNumber: BigNumberish
  ];
  export type OutputTuple = [
    gameId: string,
    player: string,
    rolledNumber: bigint
  ];
  export interface OutputObject {
    gameId: string;
    player: string;
    rolledNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DETHRoll extends BaseContract {
  connect(runner?: ContractRunner | null): DETHRoll;
  waitForDeployment(): Promise<this>;

  interface: DETHRollInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  depositErc20: TypedContractMethod<[amount: BigNumberish], [void], "payable">;

  expectingRequestWithIdToBeFulfilled: TypedContractMethod<
    [arg0: BytesLike],
    [boolean],
    "view"
  >;

  getGame: TypedContractMethod<
    [gameId: string],
    [DETHRoll.GameStructOutput],
    "view"
  >;

  getMinePendingGame: TypedContractMethod<
    [player: AddressLike],
    [DETHRoll.GameStructOutput],
    "view"
  >;

  getPlayer: TypedContractMethod<
    [player: AddressLike],
    [DETHRoll.PlayerStructOutput],
    "view"
  >;

  getRandomNumber: TypedContractMethod<[], [bigint], "nonpayable">;

  getUserBalance: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  initGame: TypedContractMethod<
    [
      _betAmount: BigNumberish,
      _hashedMessage: BytesLike,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  joinGame: TypedContractMethod<
    [
      gameId: string,
      oponent: AddressLike,
      _hashedMessage: BytesLike,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  register: TypedContractMethod<
    [_mainWallet: AddressLike, _discord: string, _sigWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  roll: TypedContractMethod<
    [
      gameId: string,
      _hashedMessage: BytesLike,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  terminatePendingGame: TypedContractMethod<
    [_hashedMessage: BytesLike, _v: BigNumberish, _r: BytesLike, _s: BytesLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  verifyMessage: TypedContractMethod<
    [_hashedMessage: BytesLike, _v: BigNumberish, _r: BytesLike, _s: BytesLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "depositErc20"
  ): TypedContractMethod<[amount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "expectingRequestWithIdToBeFulfilled"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getGame"
  ): TypedContractMethod<[gameId: string], [DETHRoll.GameStructOutput], "view">;
  getFunction(
    nameOrSignature: "getMinePendingGame"
  ): TypedContractMethod<
    [player: AddressLike],
    [DETHRoll.GameStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayer"
  ): TypedContractMethod<
    [player: AddressLike],
    [DETHRoll.PlayerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRandomNumber"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getUserBalance"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initGame"
  ): TypedContractMethod<
    [
      _betAmount: BigNumberish,
      _hashedMessage: BytesLike,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "joinGame"
  ): TypedContractMethod<
    [
      gameId: string,
      oponent: AddressLike,
      _hashedMessage: BytesLike,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<
    [_mainWallet: AddressLike, _discord: string, _sigWallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "roll"
  ): TypedContractMethod<
    [
      gameId: string,
      _hashedMessage: BytesLike,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "terminatePendingGame"
  ): TypedContractMethod<
    [_hashedMessage: BytesLike, _v: BigNumberish, _r: BytesLike, _s: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyMessage"
  ): TypedContractMethod<
    [_hashedMessage: BytesLike, _v: BigNumberish, _r: BytesLike, _s: BytesLike],
    [string],
    "view"
  >;

  getEvent(
    key: "GameCreated"
  ): TypedContractEvent<
    GameCreatedEvent.InputTuple,
    GameCreatedEvent.OutputTuple,
    GameCreatedEvent.OutputObject
  >;
  getEvent(
    key: "GameJoin"
  ): TypedContractEvent<
    GameJoinEvent.InputTuple,
    GameJoinEvent.OutputTuple,
    GameJoinEvent.OutputObject
  >;
  getEvent(
    key: "GameWon"
  ): TypedContractEvent<
    GameWonEvent.InputTuple,
    GameWonEvent.OutputTuple,
    GameWonEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Roll"
  ): TypedContractEvent<
    RollEvent.InputTuple,
    RollEvent.OutputTuple,
    RollEvent.OutputObject
  >;

  filters: {
    "GameCreated(uint256,address)": TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;
    GameCreated: TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;

    "GameJoin(string,uint256,address,address)": TypedContractEvent<
      GameJoinEvent.InputTuple,
      GameJoinEvent.OutputTuple,
      GameJoinEvent.OutputObject
    >;
    GameJoin: TypedContractEvent<
      GameJoinEvent.InputTuple,
      GameJoinEvent.OutputTuple,
      GameJoinEvent.OutputObject
    >;

    "GameWon(string,address,address,uint256)": TypedContractEvent<
      GameWonEvent.InputTuple,
      GameWonEvent.OutputTuple,
      GameWonEvent.OutputObject
    >;
    GameWon: TypedContractEvent<
      GameWonEvent.InputTuple,
      GameWonEvent.OutputTuple,
      GameWonEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Roll(string,address,uint256)": TypedContractEvent<
      RollEvent.InputTuple,
      RollEvent.OutputTuple,
      RollEvent.OutputObject
    >;
    Roll: TypedContractEvent<
      RollEvent.InputTuple,
      RollEvent.OutputTuple,
      RollEvent.OutputObject
    >;
  };
}
